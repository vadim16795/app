name: CI

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
      - stage
  pull_request:
    branches:
      - master
      - stage
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  PROD_IMAGE: prod-app
  PROD_DEPLOYMENT_NAME: prod-app
  STAGE_IMAGE: stage-app
  STAGE_DEPLOYMENT_NAME: stage-app

jobs:
#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Build the stack
#        run: docker-compose up -d
#      - name: Make tests with pytest
#        run: docker-compose exec -T app pytest -vv

  setup-build-publish:
#    needs: test
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: Configure docker to use the gcloud command-line tool as a credential helper
        run: |-
          gcloud --quiet auth configure-docker

      - name: Build the Docker image for prod
        if: github.ref == 'refs/heads/master'
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$PROD_IMAGE:${GITHUB_SHA::8}" .

      - name: Build the Docker image for stage
        if: github.ref == 'refs/heads/stage'
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$STAGE_IMAGE:${GITHUB_SHA::8}" .

      - name: Publish Docker prod image to GCR
        if: github.ref == 'refs/heads/master'
        run: |-
          docker push "gcr.io/$PROJECT_ID/$PROD_IMAGE:${GITHUB_SHA::8}"

      - name: Publish Docker prod image to GCR
        if: github.ref == 'refs/heads/stage'
        run: |-
          docker push "gcr.io/$PROJECT_ID/$STAGE_IMAGE:${GITHUB_SHA::8}"

      - name:  Get the GKE credentials so we can deploy to the prod cluster
        if: github.ref == 'refs/heads/master'
        uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: prod-app-cluster
          location: europe-west1-c
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name:  Get the GKE credentials so we can deploy to the stage cluster
        if: github.ref == 'refs/heads/stage'
        uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: stage-app-cluster
          location: europe-west1-c
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide



#      - name: Deploy to prod
#        if: github.ref == 'refs/heads/master'
#        run: |-
#          kubectl create deployment $DEPLOYMENT_NAME --image=gcr.io/$PROJECT_ID/$IMAGE:${GITHUB_SHA::8}
#          kubectl apply -f prod_manifests
#          kubectl set image deployment/$PROD_DEPLOYMENT_NAME prod-app=gcr.io/$PROJECT_ID/$PROD_IMAGE:${GITHUB_SHA::8}
#          kubectl set resources deployment $PROD_DEPLOYMENT_NAME --limits cpu=200m,memory=128Mi --requests cpu=100m,memory=64Mi
#          kubectl rollout status deployment/$PROD_DEPLOYMENT_NAME

#      - name: Deploy to stage
#        if: github.ref == 'refs/heads/stage'
#        run: |-
#          kubectl set image deployment/$STAGE_DEPLOYMENT_NAME prod-app=gcr.io/$PROJECT_ID/$STAGE_IMAGE:${GITHUB_SHA::8}
#          kubectl set resources deployment $STAGE_DEPLOYMENT_NAME --limits cpu=200m,memory=128Mi --requests cpu=50m,memory=64Mi
#          kubectl rollout status deployment/$STAGE_DEPLOYMENT_NAME

#      - name: Get services
#        run: |-
#          kubectl get services -o wide